---
title: "Cloud-Native Geospatial Sessions @ LPS 2025"
execute:
  echo: false
  engine: python
---

```{python}
from datetime import datetime, date, time, timedelta
import json
import math
import numpy as np
import pandas as pd
from IPython.display import display, HTML
from dateutil.parser import parse
```

```{python}
dt_format = "%A, %B %d, %Y %H:%M"
BASE_URL = 'https://lps25.esa.int/'

with open('3_test_tagged_file.json', 'r') as f:
    items = json.load(f)

# Add extra events
items.append(
  {
    "title": "Cloud-native Geospatial Community Social.<br/>Register to attend <a href='https://lu.ma/56jksm3l?tk=LJtRja'>here</a>",
    "start": "2025-06-25T17:00:00",
    "end": "2025-06-25T19:00:00",
    "duration": "120 Minutes",
    "location": "Schweizerhaus, Prater 116",
    "abstract": "Socialize with other members of the Cloud-Native Geospatial community. ",
    "type": "social",
    "tags": [
      "cloud-native"
    ]
  }
)
```
```{python}
for item in items:
  item['start_dt'] = datetime.fromisoformat(item['start'])
  item['end_dt'] = datetime.fromisoformat(item['end'])

df = pd.DataFrame(items)
df.sort_values(by='start_dt', inplace=True)
```

```{python}
display(HTML(f"""
  <div class="alert alert-dismissible alert-success">
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    <p>
    The following is a list of events at the
    <a href='https://lps25.esa.int/'>2025 ESA Living Planet Symposium</a>
    that involve cloud-native geospatial technologies.
    </p>
  </div>
"""))
```

```{python}
# See https://bootswatch.com/ for Theme classes

for date in [
  date(2025, 6, 22),
  date(2025, 6, 23),
  date(2025, 6, 24),
  date(2025, 6, 25),
  date(2025, 6, 26),
  date(2025, 6, 27),
]:

  df_day = df[date == df["start_dt"].dt.date]
  display(HTML(f"""<h1>{date.strftime("%A %d %B")} - {len(df_day)} events</h1>"""))
  # print(f'{len(df_day)=}')
  for idx, row in df_day.iterrows():
    desc = f'{row.title}' if isinstance(row.title, str) else ''
    if isinstance(row.session_id, str):
      event_title_html = f'<a href="{BASE_URL}programme/programme-session/?id={row.session_id}" class="card-link">{desc}</a>'
    else:
      event_title_html = desc
    location = f'({row.location})' if pd.notna(row.location) else ''
    display(HTML(f"""
      <div class="card border-primary mb-3">
        <div class="card-header">
          {row.start_dt.strftime("%A %d %B")}
          {row.start_dt.strftime("%H:%M")} - {row.end_dt.strftime("%H:%M")}
          {location}
        </div>
        <div class="card-body">
          <p class="card-text">
            {row.type.title()}:
            {event_title_html}
            <br/>
            <span class="text-success">{' '.join(['#' + tag for tag in row.tags])}</span>
          </p>
        </div>

      </div>
    """))
```


```{python}
display(HTML(f"""
  <div class="alert alert-dismissible alert-success">
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
   <p>
    Of course, some events may have been missed while compiling this list.
    If you know of other LPS events involving CNG, please create a 
    <a href='https://github.com/VorGeo/lps25-cng/issues/new'>new issue</a>
    describing the event
    and/or add the event yourself
    (i.e. 
    <a href='https://github.com/VorGeo/lps25-cng/edit/main/index.qmd'>edit this page</a>, add a new event 'item', and then submit a PR).
    </p>
  </div>
"""))
```